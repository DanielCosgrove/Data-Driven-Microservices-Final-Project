# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import datadriven_pb2 as datadriven__pb2


class TextReaderStub(object):
    """The greeting service definition.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ReadText = channel.unary_stream(
                '/datadriven.TextReader/ReadText',
                request_serializer=datadriven__pb2.ReadRequest.SerializeToString,
                response_deserializer=datadriven__pb2.ReadReply.FromString,
                )


class TextReaderServicer(object):
    """The greeting service definition.
    """

    def ReadText(self, request, context):
        """Sends a greeting
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TextReaderServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ReadText': grpc.unary_stream_rpc_method_handler(
                    servicer.ReadText,
                    request_deserializer=datadriven__pb2.ReadRequest.FromString,
                    response_serializer=datadriven__pb2.ReadReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'datadriven.TextReader', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TextReader(object):
    """The greeting service definition.
    """

    @staticmethod
    def ReadText(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/datadriven.TextReader/ReadText',
            datadriven__pb2.ReadRequest.SerializeToString,
            datadriven__pb2.ReadReply.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)
